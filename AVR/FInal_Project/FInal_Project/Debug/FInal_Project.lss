
FInal_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa4  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b0  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050e  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ad  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d1 d0       	rcall	.+418    	; 0x266 <main>
  c4:	e3 c0       	rjmp	.+454    	; 0x28c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_ISR>:
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <receivedData>
  d6:	08 95       	ret

000000d8 <TimerSet>:
  d8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  e8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
  ec:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
  f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
  f4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
  f8:	08 95       	ret

000000fa <TimerOn>:
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 126:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 12a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 12e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 132:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 136:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 13a:	8f b7       	in	r24, 0x3f	; 63
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8f bf       	out	0x3f, r24	; 63
 140:	08 95       	ret

00000142 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 154:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 158:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 15c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 160:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 16e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 172:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 176:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 17a:	89 2b       	or	r24, r25
 17c:	8a 2b       	or	r24, r26
 17e:	8b 2b       	or	r24, r27
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
        _avr_timer_cntcurr = _avr_timer_M;
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 194:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 198:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 19c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
    }
}
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <MotorControl>:
// 	0x02	Turn RIGHT
// 	0x03	Turn LEFT
	
void MotorControl(){
	static unsigned short cnt = 0;
	switch(motor_state){  //State Transitions
 1ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motor_state>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	71 f0       	breq	.+28     	; 0x1de <MotorControl+0x24>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <MotorControl+0x14>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	b9 f0       	breq	.+46     	; 0x1f6 <MotorControl+0x3c>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	51 f1       	breq	.+84     	; 0x220 <MotorControl+0x66>
 1cc:	3e c0       	rjmp	.+124    	; 0x24a <MotorControl+0x90>
		case OFF:
			if(receivedData == 0x01){
 1ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <receivedData>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <MotorControl+0x1e>
 1d6:	42 c0       	rjmp	.+132    	; 0x25c <MotorControl+0xa2>
				motor_state = ON;
 1d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_state>
 1dc:	41 c0       	rjmp	.+130    	; 0x260 <MotorControl+0xa6>
				motor_state = OFF;
			}
		break;
		
		case ON:
			if(receivedData == 0x02){
 1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <receivedData>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	19 f4       	brne	.+6      	; 0x1ec <MotorControl+0x32>
				motor_state = RIGHT;
 1e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_state>
 1ea:	32 c0       	rjmp	.+100    	; 0x250 <MotorControl+0x96>
			}
			else if(receivedData == 0x03){
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	c1 f5       	brne	.+112    	; 0x260 <MotorControl+0xa6>
				motor_state = LEFT;
 1f0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_state>
 1f4:	30 c0       	rjmp	.+96     	; 0x256 <MotorControl+0x9c>
				motor_state = ON;
			}
		break;
		
		case RIGHT: 
			if(cnt >= 30){
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1fe:	8e 31       	cpi	r24, 0x1E	; 30
 200:	91 05       	cpc	r25, r1
 202:	40 f0       	brcs	.+16     	; 0x214 <MotorControl+0x5a>
				motor_state = ON;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_state>
				cnt = 0;
 20a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 20e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 212:	26 c0       	rjmp	.+76     	; 0x260 <MotorControl+0xa6>
			}
			else{
				motor_state = RIGHT;
				++cnt;
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 21a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 21e:	18 c0       	rjmp	.+48     	; 0x250 <MotorControl+0x96>
			}
		
		break;
		
		case LEFT:
			if(cnt >= 30){
 220:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 224:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 228:	8e 31       	cpi	r24, 0x1E	; 30
 22a:	91 05       	cpc	r25, r1
 22c:	40 f0       	brcs	.+16     	; 0x23e <MotorControl+0x84>
				motor_state = ON;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_state>
				cnt = 0;
 234:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 238:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 23c:	11 c0       	rjmp	.+34     	; 0x260 <MotorControl+0xa6>
			}
			else{
				motor_state = LEFT;
				++cnt;
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 244:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 248:	06 c0       	rjmp	.+12     	; 0x256 <MotorControl+0x9c>
			}
		
		break;
		
		default:
			motor_state = OFF;
 24a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <motor_state>
		break;
 24e:	06 c0       	rjmp	.+12     	; 0x25c <MotorControl+0xa2>
		case ON:
			PORTA = 0x03;
		break;
		
		case RIGHT:
			PORTA = 0x01;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	82 b9       	out	0x02, r24	; 2
		break;
 254:	08 95       	ret
		
		case LEFT:
			PORTA = 0x02;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	82 b9       	out	0x02, r24	; 2
		break;
 25a:	08 95       	ret
			motor_state = OFF;
		break;
	}
	switch(motor_state){  //State Actions
		case OFF:
			PORTA = 0x00;
 25c:	12 b8       	out	0x02, r1	; 2
		break;
 25e:	08 95       	ret
		
		case ON:
			PORTA = 0x03;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	82 b9       	out	0x02, r24	; 2
 264:	08 95       	ret

00000266 <main>:
	
	
}

int main(void){
	DDRA = 0xFF; PORTA = 0x00;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	81 b9       	out	0x01, r24	; 1
 26a:	12 b8       	out	0x02, r1	; 2
	
	motor_state = OFF;
 26c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <motor_state>
	
	TimerSet(50);
 270:	62 e3       	ldi	r22, 0x32	; 50
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	2f df       	rcall	.-418    	; 0xd8 <TimerSet>
	TimerOn();
 27a:	3f df       	rcall	.-386    	; 0xfa <TimerOn>
	SPI_SlaveInit();
 27c:	25 df       	rcall	.-438    	; 0xc8 <SPI_SlaveInit>
	
    while (1){
		SPI_ISR();
 27e:	28 df       	rcall	.-432    	; 0xd0 <SPI_ISR>
 280:	9c df       	rcall	.-200    	; 0x1ba <MotorControl>
		MotorControl();
 282:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
		while(!TimerFlag);
 286:	88 23       	and	r24, r24
 288:	e1 f3       	breq	.-8      	; 0x282 <main+0x1c>
 28a:	f9 cf       	rjmp	.-14     	; 0x27e <main+0x18>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
